name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.filter.outputs.app }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            app:
              - '.github/workflows/deploy.yml'
              - 'src/**'
              - 'package.json'
              - 'yarn.lock'
              - 'tsconfig.json'
              - 'Dockerfile'
              - '.dockerignore'

  test-build-deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Corepack 활성화 (Yarn Berry 사용)
      - name: Enable Corepack
        run: corepack enable

      # 4. Yarn 캐시 설정
      - name: Get Yarn cache directory
        id: yarn-cache-dir
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir.outputs.dir }}
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 5. 의존성 설치
      - name: Install dependencies
        run: yarn install --immutable

      # 6. 테스트 실행
      - name: Run tests
        run: yarn test:ci

      # 7. AWS 인증 (OIDC)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # 8. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 9. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 10. 커밋 해시 추출
      - name: Extract short SHA
        id: vars
        run: echo "short_sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      # 11. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: production
          tags: |
            ${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}
          cache-from: type=registry,ref=${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ env.ECR_REPOSITORY }}:buildcache,mode=max

      # 12. ARN 플레이스홀더 치환 (보안 강화)
      - name: Replace ARN placeholders in task definition
        run: |
          # IAM Role ARNs
          sed -i 's|<EXECUTION_ROLE_ARN>|${{ secrets.EXECUTION_ROLE_ARN }}|g' task-definition.json
          sed -i 's|<TASK_ROLE_ARN>|${{ secrets.TASK_ROLE_ARN }}|g' task-definition.json

          # SSM Parameter ARNs
          sed -i 's|<SSM_ARN_AWS_REGION>|${{ secrets.SSM_ARN_AWS_REGION }}|g' task-definition.json
          sed -i 's|<SSM_ARN_DB_PORT>|${{ secrets.SSM_ARN_DB_PORT }}|g' task-definition.json
          sed -i 's|<SSM_ARN_DB_USER>|${{ secrets.SSM_ARN_DB_USER }}|g' task-definition.json
          sed -i 's|<SSM_ARN_USE_IAM_AUTH>|${{ secrets.SSM_ARN_USE_IAM_AUTH }}|g' task-definition.json
          sed -i 's|<SSM_ARN_CA_PATH>|${{ secrets.SSM_ARN_CA_PATH }}|g' task-definition.json
          sed -i 's|<SSM_ARN_DB_HOST>|${{ secrets.SSM_ARN_DB_HOST }}|g' task-definition.json
          sed -i 's|<SSM_ARN_CORS_ORIGIN>|${{ secrets.SSM_ARN_CORS_ORIGIN }}|g' task-definition.json
          sed -i 's|<SSM_ARN_DB_DATABASE>|${{ secrets.SSM_ARN_DB_DATABASE }}|g' task-definition.json

          # CloudWatch Log Groups
          sed -i 's|<CLOUDWATCH_LOG_GROUP_WAS>|${{ secrets.CLOUDWATCH_LOG_GROUP_WAS }}|g' task-definition.json
          sed -i 's|<CLOUDWATCH_LOG_GROUP_OTEL>|${{ secrets.CLOUDWATCH_LOG_GROUP_OTEL }}|g' task-definition.json

          echo "✅ All ARN placeholders replaced successfully"

      # 13. ECS 태스크 정의 업데이트 (커밋 해시 기반)
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: was
          image: ${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}

      # 14. ECS 서비스 배포 (Blue/Green)
      - name: Deploy Amazon ECS task definition
        id: ecs-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false

      # 15. 배포 완료 알림
      - name: Deployment summary
        run: |
          echo "=========================================="
          echo "Deployment Summary"
          echo "=========================================="
          echo "Region: ${{ env.AWS_REGION }}"
          echo "ECR Repository: ${{ env.ECR_REPOSITORY }}"
          echo "Image Digest: ${{ steps.docker_build.outputs.digest }}"
          echo "Image Tags: latest, ${{ steps.vars.outputs.short_sha }}"
          echo "Deployed Image: ${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.short_sha }}"
          echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "ECS Service: ${{ env.ECS_SERVICE }}"
          echo "Task Definition ARN: ${{ steps.ecs-deploy.outputs.task-definition-arn }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Short SHA: ${{ steps.vars.outputs.short_sha }}"
          echo "=========================================="
          echo ""
          echo "✅ 커밋 해시 기반 배포 완료!"
          echo "📦 배포된 이미지: ${{ steps.vars.outputs.short_sha }}"
          echo "🔄 롤백 시 이전 Task Definition Revision을 사용하세요."
          echo "=========================================="
